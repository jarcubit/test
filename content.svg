<svg fill="none" width="800px" height="400px" style="background: white;"
	xmlns="http://www.w3.org/2000/svg" data-reactroot="">
	<style>
		:scope > * { overflow-y: scroll; }
		* { overflow: scroll; }
	</style>
	<foreignObject width="800px" height="400px">
		<div xmlns="http://www.w3.org/1999/xhtml">
			<p>
				<a href="https://res.cloudinary.com/practicaldev/image/fetch/s--87dwo0hM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://anxiouswebdev.com/wp-content/uploads/2020/09/Featured-Image-2-1024x683.jpg" class="article-body-image-wrapper">
					<img src="https://res.cloudinary.com/practicaldev/image/fetch/s--87dwo0hM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://anxiouswebdev.com/wp-content/uploads/2020/09/Featured-Image-2-1024x683.jpg" alt="Picture of different applications on mobile" />
				</a>
			</p>

			<h1>
				<a href="#the-problem" class="anchor">
				</a>
  The Problem
			</h1>

			<p>The thought “how to go from coding tutorials to building apps?” is extremely common and indicative of someone stuck in tutorial hell. Tutorial hell is where someone has been doing tutorials one after the other and when they finally want to independently build something, they still have no idea where to start or what to do. </p>

			<p>
				<a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ClT6lGZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://anxiouswebdev.com/wp-content/uploads/2020/08/What-learning-to-code-feels-like.png" class="article-body-image-wrapper">
					<img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ClT6lGZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://anxiouswebdev.com/wp-content/uploads/2020/08/What-learning-to-code-feels-like.png" alt="Pie chart showing learning to code being 50% following coding tutorials and 50% not knowing how to build apps without a coding tutorial." />
				</a>
			</p>

			<p>We have all been there and if you’re learning to code for the first time, it’s common to end up there.</p>

			<h1>
				<a href="#the-solution" class="anchor">
				</a>
  The Solution
			</h1>

			<p>The key to going from coding tutorials to building apps is to stop doing tutorials. What? But how will I know how to do anything? Yes I know, hear me out.</p>

			<p>Instead, you start independently solving problems you’re interested in, that are initially very small and easy, without a tutorial guiding you. With each question you solve, you slowly gain more experience, skills and troubleshooting prowess. This prepares you to solve the next harder and larger problem.</p>

			<p>
				<a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ZIlS_-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AMBvsSYPl7kHmZP2-lcs__A.png" class="article-body-image-wrapper">
					<img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ZIlS_-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AMBvsSYPl7kHmZP2-lcs__A.png" alt="Man knocking over dominos" />
				</a>
			</p>

			<p>Ultimately, you’ll grind to a point where you can independently build an app without a tutorial. I believe this is preferable to trying to build an app straight after learning a programming language and being overwhelmed into submission.</p>

			<h2>
				<a href="#2-reasons-against-doing-a-large-number-of-tutorials" class="anchor">
				</a>
  2 Reasons Against Doing a Large Number of Tutorials:
			</h2>

			<ul>
				<li>You’re unlikely to remember anything a week afterwards.  Often I would finish watching a 6-hour tutorial and still have no idea how to build what the instructor built without re-watching the video. A week passes, those 6 hours might have been better spent sleeping as I’ve already forgotten everything. I find this to be true even if you go beyond just copying the instructor’s code line-by-line by changing/adding features along the way.</li>
				<li>You emulate the coding style and biases of the instructor instead of developing your own. The techniques, patterns and choice of methods, libraries, frameworks, etc. you saw may work best for them in the context of that particular tutorial but it may not be the best for you on a project you want to work on later on.</li>
			</ul>

			<h2>
				<a href="#2-reasons-for-problem-solving-without-a-tutorial" class="anchor">
				</a>
  2 Reasons for Problem Solving Without a Tutorial:
			</h2>

			<p>It teaches you to independently learn only what is needed. Remember cramming a textbook into your head for a school exam, only for the exam to test 1% of what you learnt then you forgot 100% soon after. No more of that!<br />
Any developer will tell you they have learnt significantly more by solving problems they were interested in then by going through tens of hours of courses (and they had a lot more fun and sense of achievement too).</p>

			<p>
				<a href="https://res.cloudinary.com/practicaldev/image/fetch/s--00hALM4y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://anxiouswebdev.com/wp-content/uploads/2020/08/Leaving-v-time-graph-1024x569.png" class="article-body-image-wrapper">
					<img src="https://res.cloudinary.com/practicaldev/image/fetch/s--00hALM4y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://anxiouswebdev.com/wp-content/uploads/2020/08/Leaving-v-time-graph-1024x569.png" alt="Exponential growth in learning is achieved when you build apps instead of doing coding tutorials." />
				</a>
			</p>

			<h1>
				<a href="#5-steps-for-going-from-coding-tutorials-to-building-apps" class="anchor">
				</a>
  5 Steps for Going From Coding Tutorials to Building Apps
			</h1>

			<h2>
				<a href="#1-learn-the-basics" class="anchor">
				</a>
  1. Learn the Basics
			</h2>

			<p>Before any problem solving without a tutorial can be done, you should at least learn the following basic elements of any programming language:</p>

			<ul>
				<li>Setting up a programming/development environment and code-editor.</li>
				<li>Data types (e.g. int, string)</li>
				<li>Variables</li>
				<li>Keywords (e.g. const, new, break)</li>
				<li>Logical and arithmetical operators </li>
				<li>If else conditions</li>
				<li>Loops</li>
				<li>Functions</li>
				<li>Input and Output operations.</li>
				<li>For <a href="https://searchapparchitecture.techtarget.com/definition/object-oriented-programming-OOP">object-orientated languages</a>, it would be useful but not necessary to learn classes.</li>
			</ul>

			<h2>
				<a href="#2-tackle-tiny-generic-problems-to-get-your-hands-dirty" class="anchor">
				</a>
  2. Tackle Tiny Generic Problems to Get Your Hands Dirty
			</h2>

			<p>This is where the real learning, fun and challenge begins. I have compiled a list of popular websites below that offer large question banks for most popular languages.</p>

			<p>
				<strong>General List of Questions:</strong>
			</p>

			<ul>
				<li>
					<a href="https://adriann.github.io/programming_problems.html">Adriann’s list of programming problems.</a>
				</li>
			</ul>

			<p>
				<strong>Good for the absolute beginner:</strong>
			</p>

			<ul>
				<li>
					<a href="https://edabit.com/challenges">Edabit</a>
				</li>
			</ul>

			<p>
				<strong>More challenging:</strong>
			</p>

			<ul>
				<li>
					<a href="https://www.codewars.com/">Code Wars</a>
				</li>
				<li>
					<a href="https://leetcode.com/problemset/all/?difficulty=Easy">Leet Code</a>
				</li>
				<li>
					<a href="https://www.hackerrank.com/domains/algorithms">Hacker Rank</a>
				</li>
			</ul>

			<p>
				<strong>Play Games (Single and Multi-Player) by solving problems:</strong>
			</p>

			<ul>
				<li>
					<a href="https://www.codingame.com/start">CodinGame</a>
				</li>
			</ul>

			<p>Use one of the websites above or find a similar website and slowly work through the problems in your local development environment. With a problem of any size and difficulty you should be able to:</p>

			<ul>
				<li>Attempt to solve it first by yourself.</li>
				<li>If you cannot, look through the following avenues to help solve the problem (I generally look in this order); Google, Stack Overflow, Official Documentation, YouTube, ask a friend/colleague, etc. The first few page results that appear after Googling “How to …”, “Why is …”, will most likely help you find the answer.</li>
			</ul>

			<p>
				<a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rOBuKCxK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://anxiouswebdev.com/wp-content/uploads/2020/08/Stack_Overflow_homepage-1024x541.png" class="article-body-image-wrapper">
					<img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rOBuKCxK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://anxiouswebdev.com/wp-content/uploads/2020/08/Stack_Overflow_homepage-1024x541.png" alt="Stack Overflow Homepage" />
				</a>
			</p>

			<ul>
				<li>If you get an error, reading the error messages in your code editor from top to bottom will tell you what is wrong (e.g. missing semi-colon on line 42). These error messages are called a Stack Trace.</li>
				<li>If you cannot fix an error just from reading the stack trace, try copy and pasting the top error message into Google to find a fix or hints to a fix.</li>
			</ul>

			<h2>
				<a href="#3-brainstorm-practical-problems-to-solve" class="anchor">
				</a>
  3. Brainstorm Practical Problems to Solve
			</h2>

			<p>Eventually, you will grow tired of solving generic problems and want to start building apps. When this happens, brainstorm a list of problems you have/could have and a possible way to solve it using code.</p>

			<p>For example, the start of your list of ideas could be:</p>

			<ol>
				<li>I need to entertain young family members, I could do this by building a <a href="https://trinket.io/python/e5a03e7cbc">choose your own adventure word text game</a>.
				</li>
				<li>I struggle to convert cooking measurements (e.g. ounces to tbsp), I could build a <a href="https://www.thecalculatorsite.com/cooking/cooking-calculator.php">cooking measurement converter</a>.
				</li>
				<li>I have trouble remembering important dates such as birthdays, I could write a program that <a href="https://www.tutorialspoint.com/python/python_sending_email.htm">sends an email to me</a> on the morning of an important date. The program could be executed daily using an automated scheduler (e.g. Windows Task Scheduler, Linux cron jobs, etc.) that would send the email only if today’s date is a particular date.</li>
			</ol>

			<p>These projects are ideal for beginners because they can be created using only one language and a code editor. They are essentially apps with a <a href="https://www.computerhope.com/jargon/t/terminal.htm">terminal</a> acting as the front-end which is sufficient to enable user-input &amp; output functionality for a lot of basic programs.</p>

			<p>
				<a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ietjv7rw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Aw-eQu_DE80SnGmD1BZNlkA.png" class="article-body-image-wrapper">
					<img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ietjv7rw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Aw-eQu_DE80SnGmD1BZNlkA.png" alt="Computer program with terminal as the front-end." />
				</a>
			</p>

			<p>You won’t be winning any UX awards with this but it’s good enough for a start.</p>

			<h3>
				<a href="#considerations-for-your-ideation" class="anchor">
				</a>
  Considerations for your ideation:
			</h3>

			<ul>
				<li>Start your list with what you think is easiest then gradually increase the difficulty.</li>
				<li>An idea could be to just replicate an existing solution and optionally add a slight tweak or new feature (e.g. building a calculator app with additional specialized functions).</li>
				<li>The goal should be to brain-dump a lot, worry about feasibility later when you start working through the list.</li>
				<li>Do not confine your ideas to those with a terminal frontend, be brave and write what you want to do. If it requires a proper frontend/graphical-user-interface, database and/or web hosting solution to share with others, write it down.</li>
				<li>Even if it requires specialized knowledge of machine learning (e.g. music-recommendation app), deep-learning (e.g. facial recognition app), and blockchain (e.g. P2P rideshare app), write it down. When you get to it, you can then learn what you need to build it.</li>
				<li>All subject matter experts started in your current position with significantly less publicly available documentation, tools and example code to help them learn. If they did it, you have no excuse to not even try.</li>
				<li>More complex ideas should align with your long-term coding goals (e.g. a website to become a web developer, music-recommendation app to become an AI developer, etc.).</li>
			</ul>

			<h2>
				<a href="#4-protect-yourself-with-git" class="anchor">
				</a>
  4. Protect Yourself with Git
			</h2>

			<p>Git is the most popular and effective <a href="https://opensource.com/resources/what-open-source">open-source</a>
				<a href="https://www.atlassian.com/git/tutorials/what-is-version-control">version control</a> system (VCS) currently available.</p>

			<p>
				<a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A1Lf7aoj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://anxiouswebdev.com/wp-content/uploads/2020/08/Git-logo-orange.svg" class="article-body-image-wrapper">
					<img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A1Lf7aoj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://anxiouswebdev.com/wp-content/uploads/2020/08/Git-logo-orange.svg" alt="Git Logo" />
				</a>
			</p>

			<p>A VCS can save a record of the current state of source code, like a save point in a game or a backup of a computer file. When a mistake is made, developers can revert their code to the last saved working record. They can also compare differences between earlier and current code to help fix mistakes.</p>

			<p>
				<a href="https://www.youtube.com/watch?v=HkdAHXoRtos">Set up git inside ALL your project directories</a>
				<strong>BEFORE</strong> you start coding to avoid a lot of wasted time and pain when (not if) the bugs show up. Don’t risk it (seriously). Use git.</p>

			<h2>
				<a href="#5-start-coding" class="anchor">
				</a>
  5. Start Coding
			</h2>

			<p>For the first idea on your list:</p>

			<ul>
				<li>Set-up your development environment.</li>
				<li>Open your code editor.</li>
				<li>Create a project folder.</li>
				<li>Set up git inside.</li>
				<li>Make a rough plan on how you will write the program.</li>
				<li>Code away!</li>
				<li>Run through the following troubleshooting avenues when you run into errors: Google, Stack Overflow, Official Documentation, YouTube, ask a colleague/friend, etc.</li>
			</ul>

			<h1>
				<a href="#takeaways" class="anchor">
				</a>
  Takeaways
			</h1>

			<p>There are infinite problems you can solve with code even when you just know the basics.</p>

			<p>So how to go from coding tutorials to building apps? It is simply a matter of:</p>

			<ol>
				<li>Learning the basics</li>
				<li>Tackling tiny generic problems to get your hands dirty</li>
				<li>Brainstorming practical problems to solve.</li>
				<li>Protecting yourself with Git.</li>
				<li>Starting!</li>
			</ol>

			<p>For the record, I am not against ever doing tutorials/courses. I believe they’re the last resort for if you’re still unsure of what to do <strong>AFTER</strong> you do all the above 5 steps.</p>

			<p>If you enjoyed this post, please share it and check out <a href="https://anxiouswebdev.com/">my blog</a> for more content like this.</p>
		</div>
	</foreignObject>
</svg>
